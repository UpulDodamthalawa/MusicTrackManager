@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using System.Security.Claims;
@using Chinook.Interfaces.EventTrigger
@using Chinook.Interfaces.Service;

@inject IArtistService artistService;
@inject ITrackService trackService;
@inject IPlaylistService playlistService;
@inject IEventTriggerService eventTriggerService

@if (!string.IsNullOrWhiteSpace(informationMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @informationMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="error fade show">
        <div class="d-flex align-items-start" style="height:48px; background-color:#ee6b6e; margin: 5px;padding:12px;">
            <div class="flex-grow-1">
                @errorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(warningMessage))
{
    <div class="error fade show">
        <div class="d-flex align-items-start" style="height:48px; background-color:bisque; margin: 5px;padding:12px;">
            <div class="flex-grow-1">
                @warningMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseWarningMessage"></button>
        </div>
    </div>
}

@if (artist == null)
{
    <Loading />
}
else
{
    <h1>@artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
                @if (tracks != null)
                {
            @foreach (var track in tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
                }
            }
        </tbody>
        </table>
}

<Modal @ref="playlistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@artist.Name - @selectedTrack.AlbumTitle - @selectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="selectedPlaylistId">
                <option value="0">--select--</option>
                @foreach (var playlist in playlists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="newPlaylistName" @oninput="UpdateText" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>  
        <div class="mb-2" style="display:flex; align-items:flex-start;margin-left:90px;align-items:center;">
            <div style="align-content:flex-start;padding-left:initial;">
                @if (!string.IsNullOrWhiteSpace(modalErrorMessage))
                {
                    <div class="error fade show" style="margin-right:90px;">
                        <div class="d-flex align-items-start" style="height:38px; background-color:#ee6b6e; margin: 5px;padding:6px;">
                            <div class="flex-grow-1">
                                @modalErrorMessage
                            </div>
                            <button type="button" class="btn-close" aria-label="Close" style="margin-top:5px;margin-left:190px;" @onclick="CloseModalErrorMessage"></button>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(modalWarningMessage))
                {
                    <div class="error fade show" style="margin-right:90px;">
                        <div class="d-flex align-items-start" style="height:38px; background-color:bisque; margin: 5px;padding:6px;">
                            <div class="flex-grow-1">
                                @modalWarningMessage
                            </div>
                            <button type="button" class="btn-close" aria-label="Close" style="margin-top:5px;margin-left:190px;" @onclick="CloseModalWarningMessage"></button>
                        </div>
                    </div>
                }
            </div>
            <button type="button" class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
        </div>
    </Footer>
</Modal>

@code {
    [Parameter] public long artistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IJSRuntime jSRuntime { get; set; }
    private Modal playlistDialog { get; set; }

    private ArtistDto? artist;
    private List<PlaylistTrackDto>? tracks;
    private PlaylistTrackDto? selectedTrack;
    private string? informationMessage;
    private string? errorMessage;
    private string? warningMessage;
    private string? modalErrorMessage;
    private string? modalWarningMessage;
    private string? currentUserId;
    private List<PlaylistDto>? playlists;
    private ElementReference playlistSelectElement;
    private string newPlaylistName;
    private int selectedPlaylistId = 0;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        currentUserId = await GetUserId();
        selectedPlaylistId = 0;

        artist = await artistService.GetArtistById(artistId);
        tracks = await trackService.GetTracksByArtistAndUserId(artistId, currentUserId);
        if (tracks == null)
        {
            warningMessage = $"There is no any tracks for this Artist - {artist?.Name}.";
        }
        playlists = await playlistService.GetAll(currentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = tracks?.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = true;

        await trackService.AddTrackToMyFavourite(track, currentUserId);
        eventTriggerService.TriggerMyFavouritePlaylistAdded();

        informationMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist - My favorite traks.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = tracks?.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;

        await trackService.RemoveTrackFromMyFavourite(track, currentUserId);

        informationMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist - My favorite traks.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        selectedTrack = tracks?.FirstOrDefault(t => t.TrackId == trackId);
        playlistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        if (!string.IsNullOrEmpty(newPlaylistName) && playlists.Any(p => p.Name == newPlaylistName) && selectedPlaylistId == 0)
        {
            modalErrorMessage = $"Error : Playlist name already exists.";
        }
        else if (selectedPlaylistId == 0 && string.IsNullOrEmpty(newPlaylistName))
        {
            modalErrorMessage = $"Error : Please select an option";
        }
        else if (selectedPlaylistId != 0 && !string.IsNullOrEmpty(newPlaylistName))
        {
            modalWarningMessage = $"Warning : Please select only one option";
        }
        else
        {
            var playlistDto = await trackService.AddTrackToPlaylist(selectedPlaylistId, selectedTrack.TrackId, currentUserId, newPlaylistName);
            if (!string.IsNullOrEmpty(newPlaylistName))
            {
                eventTriggerService.TriggerPlaylistAdded();
            }
            CloseInfoMessage();
            playlists = await playlistService.GetAll(currentUserId);
            informationMessage = $"Track {artist.Name} - {selectedTrack.AlbumTitle} - {selectedTrack.TrackName} added to playlist - {GetSelectedPlaylistName()}.";
            playlistDialog.Close();
        }
        selectedPlaylistId = 0;
        newPlaylistName = string.Empty;
    }

    private string GetSelectedPlaylistName()
    {
        var selectedPlaylist = playlists.FirstOrDefault(p => p.PlaylistId == selectedPlaylistId);
        return selectedPlaylist != null ? selectedPlaylist.Name : newPlaylistName;
    }

    private void UpdateText(ChangeEventArgs e)
    {
        newPlaylistName = e.Value.ToString();
    }

    private void CloseInfoMessage()
    {
        informationMessage = "";
    }

    private void CloseModalErrorMessage()
    {
        modalErrorMessage = "";
    }

    private void CloseModalWarningMessage()
    {
        modalWarningMessage = "";
    }

    private void CloseErrorMessage()
    {
        errorMessage = "";
    }

    private void CloseWarningMessage()
    {
        warningMessage = "";
    }
}
