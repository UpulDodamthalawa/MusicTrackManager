@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using System.Security.Claims;
@using Chinook.ClientModels;
@using Chinook.Constants
@using Chinook.Interfaces.EventTrigger
@using Chinook.Interfaces.Service;

@inject IPlaylistService playlistService;
@inject IEventTriggerService eventTriggerService

<h1>Playlist <strong>@playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(infomationMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @infomationMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (track.IsFavorite)
                            {
                                <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                            }
                            else
                            {
                                <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                            }
                            @if (!playlist.Name.Equals("My favorite tracks"))
                            {
                                <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long playlistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private PlaylistDto playlist;
    private string? currentUserId;
    private string? infomationMessage;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await GetUserId();
        await InvokeAsync(StateHasChanged);

        playlist = await playlistService.GetPlaylistByPlaylistAndUserId(playlistId, currentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId != null ? userId : string.Empty;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = true;

        await playlistService.AddTrackToMyFavorite(track, currentUserId);
        eventTriggerService.TriggerMyFavouritePlaylistAdded();

        infomationMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist - {Constant.MyFavouritePlaylist}.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;
        await playlistService.RemoveTrackFromMyFavorite(track, currentUserId);
        playlist = await playlistService.GetPlaylistByPlaylistAndUserId(playlistId, currentUserId);

        infomationMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist - {Constant.MyFavouritePlaylist}.";
    }

    private async void RemoveTrack(long trackId)
    {
        await playlistService.RemoveTrackFromPlaylist(playlist.PlaylistId, trackId);
        playlist = await playlistService.GetPlaylistByPlaylistAndUserId(playlistId, currentUserId);

        infomationMessage = $"Track removed from playlist - {playlist.Name}.";
    }

    private void CloseInfoMessage()
    {
        infomationMessage = "";
    }
}
