@page "/"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Interfaces.Service

@inject IArtistService artistService;
@inject IAlbumService albumService;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<div class="d-flex">
    <input type="text" class="form-control" style="width:30%; margin-right:5px;" @bind="searchTerm" placeholder="Search by artist name" />
    <button class="btn btn-success" @onclick="Search">Search</button>
</div>
@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistDto> Artists;
    private List<ArtistDto> OriginalArtists;
    private string searchTerm;

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
        OriginalArtists = Artists;
    }

    public async Task<List<ArtistDto>> GetArtists()
    {
        return await artistService.GetAll();
    }

    public async Task<List<AlbumDto>> GetAlbumsForArtist(int artistId)
    {
        return await albumService.GetAlbumsByArtist(artistId);
    }

    private void Search()
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            Artists = OriginalArtists.Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            Artists = OriginalArtists;
        }
    }
}
